//go:build go1.21

// Package swapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package swapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// People defines model for People.
type People struct {
	Address    string  `json:"address"`
	Name       string  `json:"name"`
	Patronymic *string `json:"patronymic,omitempty"`
	Surname    string  `json:"surname"`
}

// UserList defines model for UserList.
type UserList struct {
	Items *[]People `json:"items,omitempty"`
	Limit *int      `json:"limit,omitempty"`
	Page  *int      `json:"page,omitempty"`
	Total *int      `json:"total,omitempty"`
}

// GetInfoParams defines parameters for GetInfo.
type GetInfoParams struct {
	PassportSerie  int `form:"passportSerie" json:"passportSerie"`
	PassportNumber int `form:"passportNumber" json:"passportNumber"`
}

// GetListParams defines parameters for GetList.
type GetListParams struct {
	Id             *int    `form:"id,omitempty" json:"id,omitempty"`
	Surname        *string `form:"surname,omitempty" json:"surname,omitempty"`
	Name           *string `form:"name,omitempty" json:"name,omitempty"`
	Patronymic     *string `form:"patronymic,omitempty" json:"patronymic,omitempty"`
	Address        *string `form:"address,omitempty" json:"address,omitempty"`
	PassportSerie  *int    `form:"passportSerie,omitempty" json:"passportSerie,omitempty"`
	PassportNumber *int    `form:"passportNumber,omitempty" json:"passportNumber,omitempty"`
	Page           *int    `form:"page,omitempty" json:"page,omitempty"`
	Limit          *int    `form:"limit,omitempty" json:"limit,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get information about the user
	// (GET /info)
	GetInfo(w http.ResponseWriter, r *http.Request, params GetInfoParams)
	// Get users
	// (GET /list)
	GetList(w http.ResponseWriter, r *http.Request, params GetListParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetInfo operation middleware
func (siw *ServerInterfaceWrapper) GetInfo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInfoParams

	// ------------- Required query parameter "passportSerie" -------------

	if paramValue := r.URL.Query().Get("passportSerie"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "passportSerie"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "passportSerie", r.URL.Query(), &params.PassportSerie)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "passportSerie", Err: err})
		return
	}

	// ------------- Required query parameter "passportNumber" -------------

	if paramValue := r.URL.Query().Get("passportNumber"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "passportNumber"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "passportNumber", r.URL.Query(), &params.PassportNumber)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "passportNumber", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetInfo(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetList operation middleware
func (siw *ServerInterfaceWrapper) GetList(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetListParams

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Optional query parameter "surname" -------------

	err = runtime.BindQueryParameter("form", true, false, "surname", r.URL.Query(), &params.Surname)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "surname", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "patronymic" -------------

	err = runtime.BindQueryParameter("form", true, false, "patronymic", r.URL.Query(), &params.Patronymic)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "patronymic", Err: err})
		return
	}

	// ------------- Optional query parameter "address" -------------

	err = runtime.BindQueryParameter("form", true, false, "address", r.URL.Query(), &params.Address)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "address", Err: err})
		return
	}

	// ------------- Optional query parameter "passportSerie" -------------

	err = runtime.BindQueryParameter("form", true, false, "passportSerie", r.URL.Query(), &params.PassportSerie)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "passportSerie", Err: err})
		return
	}

	// ------------- Optional query parameter "passportNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "passportNumber", r.URL.Query(), &params.PassportNumber)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "passportNumber", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetList(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/info", wrapper.GetInfo)
	m.HandleFunc("GET "+options.BaseURL+"/list", wrapper.GetList)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xUzW7TQBB+ldXA0bJdSi8+ckGRECBVnKoeNvYk2eL96ey6IopyQBx4BSR4CFRAqkDp",
	"M2zeCO3aSRriohChnrzene+b2e+b2RmUWhqtUDkLxQxsOUHJ4/I1alNjWBnSBskJjPu8qghtXOI7LmMM",
	"+G8p81/87fK9/+mv/deELT/4Xynzn/0Pv/A3fhH2/PeUnSQshKTsCBJwUxPQ1pFQY5gnoLjEP5g/BT6/",
	"6Is23JFWUynKfoy/9df+ZvmxD2sbuj9ZAO6C5gkQXjaCsILibM3QVZ2slTlfI/XwAksX0r2xSC+Edbt6",
	"Codye/GYcAQFPMo23mSdMVnnynydghPxafivhRSRvjsQyuEYqdVpjP0nTjte9x3Nd+4QtoQa6RgtXNSr",
	"rYbF7QSukKzQCgrI0zw9CvzaoOJGQAHHaZ4eQ/RsEm+ZrcjGGMsOmnAntBpUUMBzdIOW1XDiEh2SheJs",
	"BiLwXzZI05XwBRhurdHkTpFEMGLjkqMGk66r+6/5d8aXjRwi/RvleYi2RivbGvwkz8On1MqhilflxtSi",
	"jJfNLmxQbHaHcB/7gxkV2pKEca3kr94GvZ+2ubaPnvGKhfrRxlY86YsZKIekeM0s0hUSQyLdtoFtpOQ0",
	"bT2JVpOMpTM+1I1jboKssV3PZHXX4/eZGmdgL1NFBYc4t5nKHexmjvuhh+LuPEMHoFevxkGJt/v+P/T5",
	"IRTj7dwVjnhTOyiOkr1J2sernyVPHnbG1k91z5SdNmWJ1o6amq3yP8jYhQGzoaD57wAAAP//gT/AgrIH",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
